<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Audio Receiver</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    input, button, select { margin: 5px; padding: 5px; }
    #transcriptions div { margin-top: 10px; border-top: 1px solid #ccc; padding-top: 10px; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 5px; text-align: left; border-bottom: 1px solid #ddd; }
    audio { width: 300px; }
    .error { color: red; font-weight: bold; }
    .connected { color: green; }
    .disconnected { color: orange; }
    .status { display: inline-block; margin-right: 5px; }
  </style>
</head>
<body>
  <h1>Audio Receiver</h1>
  <div>
    <label for="ip">Add Remote Sender IP:</label>
    <input type="text" id="ip" value="192.168.68.64">
    <button id="addRemote">Add Remote</button>
  </div>
  <div id="transcriptions">
    <h2>Recordings</h2>
  </div>

  <script>
    const ipInput = document.getElementById('ip');
    const addRemoteButton = document.getElementById('addRemote');
    const transcriptionsDiv = document.getElementById('transcriptions');
    let remoteCounter = 0;

    function formatTime(date) {
      return date.toTimeString().split(' ')[0].slice(0, 5);
    }

    function updateStatus(elementId, status, message) {
      const statusElement = document.getElementById(elementId);
      statusElement.innerHTML = `<span class="status ${status}">${message}</span>`;
    }

    function addRemoteSource(ip) {
      remoteCounter++;
      const remoteId = `remote${remoteCounter}`;
      const remoteDiv = document.createElement('div');
      remoteDiv.id = remoteId;
      remoteDiv.innerHTML = `
        <h3>Remote: ${ip}</h3>
        <p id="${remoteId}Text">
          <span class="status">Connecting...</span>
          Segment Length: 
          <select id="${remoteId}Length">
            <option value="6000">6s</option>
            <option value="60000" selected>1min</option>
            <option value="600000">10min</option>
          </select>
          <button id="${remoteId}Pause">PAUSE</button>
        </p>
        <p id="${remoteId}StartTime">Segment started at ${formatTime(new Date())}</p>
        <p>Live Stream: <audio id="${remoteId}Live" controls></audio></p>
        <table id="${remoteId}Table">
          <thead>
            <tr><th><input type="checkbox" id="${remoteId}SelectAll"></th><th>Start Time</th><th>Audio</th></tr>
          </thead>
          <tbody id="${remoteId}Segments"></tbody>
        </table>
        <button id="${remoteId}MergeSelected">Merge Selected</button>
        <button id="${remoteId}DownloadAll">Download All</button>
        <button id="${remoteId}DeleteAll">Delete All</button>
      `;
      transcriptionsDiv.appendChild(remoteDiv);

      let socket;
      try {
        socket = new WebSocket(`ws://${ip}:8080`);
        socket.binaryType = 'arraybuffer';
      } catch (error) {
        console.error(`Failed to create WebSocket for ${ip}:`, error);
        updateStatus(`${remoteId}Text`, 'error', `Failed to initialize: ${error.message}`);
        return;
      }

      let audioChunks = [];
      let segmentCounter = 0;
      let allSegments = [];
      let isRecording = true;
      let intervalId = null;
      let segmentStartTime = new Date();

      // Add a connection timeout
      const connectionTimeout = setTimeout(() => {
        if (socket.readyState === WebSocket.CONNECTING) {
          console.error(`WebSocket connection to ${ip} timed out`);
          updateStatus(`${remoteId}Text`, 'error', 'Connection timed out');
          socket.close(); // Force close if still connecting
        }
      }, 5000); // 5-second timeout

      // Live stream setup
      const liveAudio = document.getElementById(`${remoteId}Live`);
      const audioContext = new AudioContext();
      const mediaSource = new MediaSource();
      liveAudio.src = URL.createObjectURL(mediaSource);
      let sourceBuffer;

      mediaSource.addEventListener('sourceopen', () => {
        try {
          sourceBuffer = mediaSource.addSourceBuffer('audio/mpeg');
          liveAudio.play().catch(error => {
            console.error(`Error auto-playing live audio for ${remoteId}:`, error);
          });
        } catch (error) {
          console.error(`SourceBuffer error for ${remoteId}:`, error);
          updateStatus(`${remoteId}Text`, 'error', `Audio setup failed: ${error.message}`);
        }
      });

      function startRecording() {
        const length = parseInt(document.getElementById(`${remoteId}Length`).value);
        intervalId = setInterval(() => {
          if (isRecording && audioChunks.length > 0) {
            const mp3Blob = new Blob(audioChunks, { type: 'audio/mp3' });
            const mp3Url = URL.createObjectURL(mp3Blob);

            segmentCounter++;
            const tbody = document.getElementById(`${remoteId}Segments`);
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td><input type="checkbox" class="${remoteId}_segmentCheckbox" data-segment="${segmentCounter}"></td>
              <td>${formatTime(segmentStartTime)}</td>
              <td>
                <audio id="${remoteId}_segment${segmentCounter}" controls src="${mp3Url}" type="audio/mp3"></audio>
                <a href="${mp3Url}" download="${remoteId}_${Date.now()}.mp3">Download</a>
              </td>
            `;
            tbody.appendChild(tr);

            allSegments.push({ blob: mp3Blob, startTime: segmentStartTime });
            audioChunks = [];
            segmentStartTime = new Date();
            document.getElementById(`${remoteId}StartTime`).textContent = `Segment started at ${formatTime(segmentStartTime)}`;
          }
        }, length);
      }

      socket.onopen = () => {
        clearTimeout(connectionTimeout); // Cancel timeout on success
        console.log(`WebSocket connected to ${ip}`);
        updateStatus(`${remoteId}Text`, 'connected', 'Connected');
        startRecording();
      };

      socket.onmessage = (event) => {
        if (isRecording) {
          audioChunks.push(event.data);
          if (sourceBuffer && !sourceBuffer.updating) {
            sourceBuffer.appendBuffer(event.data);
          }
        }
      };

      socket.onerror = (error) => {
        clearTimeout(connectionTimeout);
        console.error(`WebSocket error for ${ip}:`, error);
        updateStatus(`${remoteId}Text`, 'error', `Connection failed: ${error.message || 'Unknown error'}`);
        clearInterval(intervalId);
      };

      socket.onclose = (event) => {
        clearTimeout(connectionTimeout);
        console.log(`WebSocket closed for ${ip}: Code=${event.code}, Reason=${event.reason || 'No reason'}`);
        updateStatus(`${remoteId}Text`, 'disconnected', `Disconnected (Code: ${event.code}${event.reason ? ', ' + event.reason : ''})`);
        clearInterval(intervalId);
      };

      // Pause/Resume toggle
      const pauseButton = document.getElementById(`${remoteId}Pause`);
      pauseButton.addEventListener('click', () => {
        isRecording = !isRecording;
        pauseButton.textContent = isRecording ? 'PAUSE' : 'RESUME';
        if (socket.readyState === WebSocket.OPEN) {
          updateStatus(`${remoteId}Text`, isRecording ? 'connected' : 'disconnected', 
            isRecording ? 'Connected' : 'Paused');
        }
      });

      // Select All checkbox
      document.getElementById(`${remoteId}SelectAll`).addEventListener('change', (e) => {
        const checkboxes = document.querySelectorAll(`.${remoteId}_segmentCheckbox`);
        checkboxes.forEach((cb) => cb.checked = e.target.checked);
      });

      // Merge Selected
      document.getElementById(`${remoteId}MergeSelected`).addEventListener('click', () => {
        const selected = Array.from(document.querySelectorAll(`.${remoteId}_segmentCheckbox:checked`))
          .map(cb => allSegments[parseInt(cb.dataset.segment) - 1]);
        if (selected.length === 0) {
          alert('No segments selected.');
          return;
        }
        const combinedBlob = new Blob(selected.map(s => s.blob), { type: 'audio/mp3' });
        const combinedUrl = URL.createObjectURL(combinedBlob);
        const a = document.createElement('a');
        a.href = combinedUrl;
        a.download = `${remoteId}_merged_${Date.now()}.mp3`;
        a.click();
      });

      // Download All
      document.getElementById(`${remoteId}DownloadAll`).addEventListener('click', () => {
        if (allSegments.length === 0) {
          alert('No segments to download.');
          return;
        }
        const combinedBlob = new Blob(allSegments.map(s => s.blob), { type: 'audio/mp3' });
        const combinedUrl = URL.createObjectURL(combinedBlob);
        const a = document.createElement('a');
        a.href = combinedUrl;
        a.download = `${remoteId}_combined_${Date.now()}.mp3`;
        a.click();
      });

      // Delete All
      document.getElementById(`${remoteId}DeleteAll`).addEventListener('click', () => {
        const tbody = document.getElementById(`${remoteId}Segments`);
        const rows = tbody.querySelectorAll('tr');
        rows.forEach((row) => {
          const audio = row.querySelector('audio');
          const link = row.querySelector('a');
          if (audio) URL.revokeObjectURL(audio.src);
          if (link) URL.revokeObjectURL(link.href);
          row.remove();
        });
        allSegments = [];
        segmentStartTime = new Date();
        document.getElementById(`${remoteId}StartTime`).textContent = `Segment started at ${formatTime(segmentStartTime)}`;

        const liveAudio = document.getElementById(`${remoteId}Live`);
        if (mediaSource.readyState === 'open') {
          mediaSource.endOfStream();
        }
        URL.revokeObjectURL(liveAudio.src);
        const newMediaSource = new MediaSource();
        liveAudio.src = URL.createObjectURL(newMediaSource);
        newMediaSource.addEventListener('sourceopen', () => {
          sourceBuffer = newMediaSource.addSourceBuffer('audio/mpeg');
          liveAudio.play().catch(error => {
            console.error(`Error auto-playing live audio after reset for ${remoteId}:`, error);
          });
        });
      });
    }

    addRemoteButton.addEventListener('click', () => {
      const ip = ipInput.value.trim();
      if (!ip) {
        alert('Please enter an IP address');
        return;
      }
      addRemoteSource(ip);
    });
  </script>
</body>
</html>

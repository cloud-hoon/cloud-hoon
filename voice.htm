<meta name="viewport" content="width=device-width, initial-scale=1.0">
<input id="search" style="height:50px"/>
<input value="Voice" type="button" id="voiceSearch" onclick="reallyStop=false;recognition.start()" style="height:50px">
<input value="Abort" type="button" id="voiceAbort" onclick="stopListening()" style="height:50px">
<br/><u>Recent History</u>
<br/><div id="history"></div>
<script>
var reallyStop=false;
var actions=['open','youtube','call','map','find','finding'];
var grammars = '#JSGF V1.0; grammar colors; public <actions> = '+actions.join(' | ');
var recognition = new webkitSpeechRecognition()
var grammarList = new webkitSpeechGrammarList()
recognition.continuous = false;
recognition.interimResults = false;
grammarList.addFromString(grammars, 1);
recognition.grammars = grammarList;

function triggerResult(result){
	document.getElementById("search").value=result;
	processResult(result);
}

function updateHistory(){
	if(searchHistory = localStorage.getItem("history")){
		searchHistory=JSON.parse(searchHistory)
		out=""
		for(i of searchHistory){
			out+="<br/><a href='#' onclick=\"triggerResult('"+i+"')\">"+i+"</a>"
		}
		document.getElementById("history").innerHTML = out;
	}
}
function stopListening(){
	reallyStop=true;
	recognition.stop();
}
function processResult(result){
	
	var data=result.split(" ")
	keyword=data[0].toLowerCase();
	index = actions.indexOf(keyword);
	payload=result.substring(keyword.length+1)
	saveHistory = true;
	if(result=='stop listening' || result=='keep quiet' || result=='shut up'){
		result="I will stop listening"
		saveHistory=false;
		stopListening();
	}else if(index >= 0){
		if(keyword == 'open'){
			result="opening "+payload
		}else if(keyword == 'map'){
			window.open("https://www.google.com.sg/search?q="+result);
		}else if(keyword == 'find' || keyword == 'finding' ){
			result = "finding "+payload
			window.open("https://www.google.com.sg/search?q="+payload);
		}
	}else{
		saveHistory=false;
		result="What's "+result+"?"
	}
	
	if(saveHistory){
		var searchHistory=localStorage.getItem("history");
		if(!searchHistory)	
			searchHistory=[]
		else
			searchHistory=JSON.parse(searchHistory)
		
		if(searchHistory.length>=5){
			searchHistory.pop();
		}
		searchHistory.unshift(result)
		localStorage.setItem("history",JSON.stringify(searchHistory));
		updateHistory();
	}
	
	
	return result;
}
//recognition.start();
recognition.onresult = function(e) {
	//console.log(e.results);
	//if(e.results[0][0].confidence < 0.7) return;
	result=e.results[0][0].transcript
	document.getElementById('search').value = result;
	result=processResult(result);
	speech= new SpeechSynthesisUtterance(result);
	/*speech.onend=function(){
		if(!reallyStop){
		}
	recognition.start()
	}
	window.speechSynthesis.speak(speech);
        recognition.stop();
	
        //setTimeout(function (){recognition.start()},1000)
      };
/*recognition.onspeechend=function(e){
	recognition.stop();
*/};
recognition.onend = function(e) {
	//recognition.stop()
        //console.log(e);
	//var msg = new SpeechSynthesisUtterance("Error:"+e.error);
	//window.speechSynthesis.speak(msg);
        if(!reallyStop){
		setTimeout(function (){recognition.start()},1500)
	}
};
updateHistory()
recognition.start();
</script>

<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Claw Machine Game</title>
  <style>
    body {
      background: linear-gradient(to bottom right, #ffe6f0, #ccf2ff);
      font-family: 'Comic Sans MS', cursive, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
    }
    #collected {
      font-size: 22px;
      font-weight: bold;
      color: #ff3399;
      margin-bottom: 10px;
    }
    #gameArea {
      border: 5px solid #ff99cc;
      background: #ffffff;
      border-radius: 20px;
      width: 300px;
      height: 400px;
      position: relative;
      overflow: hidden;
    }
    .prize {
      width: 40px;
      height: 40px;
      background-color: yellow;
      border-radius: 50%;
      position: absolute;
      text-align: center;
      line-height: 40px;
      font-size: 20px;
      font-weight: bold;
      transition: top 0.5s;
    }
    .claw {
      width: 40px;
      height: 40px;
      position: absolute;
      top: 0;
      font-size: 28px;
      text-align: center;
      transition: top 0.5s, left 0.3s;
    }
    #result {
      margin-top: 10px;
      font-size: 20px;
      color: #0066cc;
    }
    .controls {
      margin-top: 20px;
    }
    .controls button {
      padding: 10px 15px;
      font-size: 18px;
      background-color: #66ccff;
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      margin: 0 10px;
    }
    .controls button:hover {
      background-color: #3399ff;
    }
  </style>
</head>
<body>
  <div id="collected">Collected: </div>
  <div id="gameArea">
    <div class="claw" id="claw1">X</div>
    <div class="claw" id="claw2">X</div>
  </div>
  <div id="result"></div>
  <div class="controls">
    <button onclick="moveClaws(-20)">Left</button>
    <button onclick="grabPrize()">Grab</button>
    <button onclick="moveClaws(20)">Right</button>
  </div>  <script>
    const gameArea = document.getElementById('gameArea');
    const claws = [
      document.getElementById('claw1'),
      document.getElementById('claw2')
    ];
    const result = document.getElementById('result');
    const collected = document.getElementById('collected');
    const prizeSymbols = ['üíñ', 'üåü', 'üéâ', 'üêÆ', 'üöó'];
    const prizeNames = ['Heart', 'Star', 'Party', 'Cow', 'Car'];
    let clawLefts = [80, 180];
    let heldPrizes = [null, null];

    function getRandomInt(max) {
      return Math.floor(Math.random() * max);
    }

    function isOverlapping(newX, newY, existingPrizes) {
      for (let p of existingPrizes) {
        let px = parseInt(p.style.left);
        let py = parseInt(p.style.top);
        if (Math.abs(px - newX) < 45 && Math.abs(py - newY) < 45) {
          return true;
        }
      }
      return false;
    }

    function spawnPrizes() {
      const existing = [];
      for (let i = 0; i < 15; i++) {
        let tries = 0;
        let x, y;
        do {
          x = getRandomInt(260);
          y = 300 + getRandomInt(80);
          tries++;
        } while (isOverlapping(x, y, existing) && tries < 100);

        const div = document.createElement('div');
        div.className = 'prize';
        div.style.left = x + 'px';
        div.style.top = y + 'px';
        const index = getRandomInt(prizeSymbols.length);
        div.textContent = prizeSymbols[index];
        div.dataset.name = prizeNames[index];
        gameArea.appendChild(div);
        existing.push(div);
      }
    }

    function moveClaws(delta) {
      clawLefts = clawLefts.map(x => Math.min(260, Math.max(0, x + delta)));
      claws.forEach((claw, i) => {
        claw.style.left = clawLefts[i] + 'px';
        if (heldPrizes[i]) heldPrizes[i].style.left = clawLefts[i] + 'px';
      });
    }

    function playSound(freq) {
      const context = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = context.createOscillator();
      const gainNode = context.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(context.destination);
      oscillator.type = 'sine';
      oscillator.frequency.setValueAtTime(freq, context.currentTime);
      oscillator.start();
      oscillator.stop(context.currentTime + 0.2);
    }

    function grabPrize() {
      claws.forEach(claw => claw.style.top = '340px');
      heldPrizes.forEach(p => p?.remove());
      heldPrizes = [null, null];

      setTimeout(() => {
        const prizes = document.querySelectorAll('.prize');
        claws.forEach((claw, i) => {
          const clawX = clawLefts[i];
          for (let prize of prizes) {
            const prizeX = parseInt(prize.style.left);
            const prizeY = parseInt(prize.style.top);
            if (!heldPrizes.includes(prize) && Math.abs(clawX - prizeX) < 30 && prizeY >= 300) {
              heldPrizes[i] = prize;
              prize.style.left = clawX + 'px';
              prize.style.top = '340px';
              break;
            }
          }
        });
      }, 500);

      setTimeout(() => {
        claws.forEach(claw => claw.style.top = '0px');
        heldPrizes.forEach((p, i) => {
          if (p) p.style.top = '0px';
        });
      }, 1000);

      setTimeout(() => {
        heldPrizes.forEach((p, i) => {
          if (p) {
            if (Math.random() < 0.7) {
              collected.innerHTML += p.textContent + ' ';
              result.textContent = `You grabbed a ${p.dataset.name}!`;
              p.remove();
              playSound(880);
            } else {
              p.style.top = '340px';
              playSound(220);
            }
          }
        });
        heldPrizes = [null, null];
      }, 1600);
    }

    window.onload = spawnPrizes;
  </script></body>
</html>

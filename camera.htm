<!DOCTYPE html>
<html>
<head>
  <title>Face & QR Scanner with Snapshots</title>
  <style>
    video { width: 50%; border: 1px solid #ccc; }
    canvas { max-width: 100%; border: 1px solid #ccc; }
    #overlay { position: absolute; top: 0; left: 0; }
    #container { position: relative; display: inline-block; }
    .snapshots { margin-top: 20px; }
    .snapshot { margin: 10px 0; border: 1px solid #ccc; padding: 5px; }
    button {
      font-size: 1.5em;
      padding: 10px 20px;
      margin-top: 10px;
      margin-right: 10px;
    }
    #controls { margin-top: 10px; }
  </style>
</head>
<body>
  <h1>Face & QR Scanner with Snapshots</h1>
  <div id="container">
    <video id="video" autoplay muted playsinline></video>
    <canvas id="overlay"></canvas>
  </div>
  <p id="log">Initializing...</p>
  <p id="counters"></p>
  <div id="controls">
    <button id="pauseBtn">Pause</button>
    <button id="toggleFaceBtn">Toggle Face Detection (On)</button>
    <button id="toggleQRBtn">Toggle QR Detection (On)</button>
    <button id="clearSnapshotsBtn">Clear Snapshots</button>
  </div>
  <div class="snapshots" id="snapshots"></div>

  <script>
    const video = document.getElementById('video');
    const overlay = document.getElementById('overlay');
    const ctx = overlay.getContext('2d');
    const log = document.getElementById('log');
    const snapshotsContainer = document.getElementById('snapshots');
    const pauseBtn = document.getElementById('pauseBtn');
    const toggleFaceBtn = document.getElementById('toggleFaceBtn');
    const toggleQRBtn = document.getElementById('toggleQRBtn');
    const clearSnapshotsBtn = document.getElementById('clearSnapshotsBtn');
    const counters = document.getElementById('counters');

    let scanning = true;
    let detectFaces = true;
    let detectQRs = true;
    let faceCount = 0;
    let qrCount = 0;
    let stream = null;

    const seenQRCodes = new Set();
    const seenFaces = [];

    pauseBtn.addEventListener('click', () => {
      scanning = !scanning;
      pauseBtn.textContent = scanning ? 'Pause' : 'Resume';
      if (scanning) {
        setupCamera();
      } else {
        if (stream) {
          stream.getTracks().forEach(track => track.stop());
          video.srcObject = null;
        }
      }
    });

    toggleFaceBtn.addEventListener('click', () => {
      detectFaces = !detectFaces;
      toggleFaceBtn.textContent = `Toggle Face Detection (${detectFaces ? 'On' : 'Off'})`;
    });

    toggleQRBtn.addEventListener('click', () => {
      detectQRs = !detectQRs;
      toggleQRBtn.textContent = `Toggle QR Detection (${detectQRs ? 'On' : 'Off'})`;
    });

    clearSnapshotsBtn.addEventListener('click', () => {
      snapshotsContainer.innerHTML = '';
      seenFaces.length = 0;
      seenQRCodes.clear();
      faceCount = 0;
      qrCount = 0;
      updateCounters();
    });

    function updateCounters() {
      counters.textContent = `Faces: ${faceCount}, QR Codes: ${qrCount}`;
    }

    async function setupCamera() {
      try {
        stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } });
        video.srcObject = stream;
        video.onloadedmetadata = () => {
          overlay.width = video.videoWidth;
          overlay.height = video.videoHeight;
          detectLoop();
        };
      } catch (err) {
        log.textContent = 'Camera access denied or not supported.';
        console.error(err);
      }
    }

    function isSimilarFace(newFace) {
      return seenFaces.some(f =>
        Math.abs(f.x - newFace.x) < 30 &&
        Math.abs(f.y - newFace.y) < 30 &&
        Math.abs(f.width - newFace.width) < 30 &&
        Math.abs(f.height - newFace.height) < 30
      );
    }

    function captureSnapshot(label, box) {
      const canvas = document.createElement('canvas');
      canvas.width = box.width;
      canvas.height = box.height;
      const context = canvas.getContext('2d');
      context.drawImage(video, box.x, box.y, box.width, box.height, 0, 0, box.width, box.height);

      const container = document.createElement('div');
      container.className = 'snapshot';
      const timestamp = new Date().toLocaleString();
      container.innerHTML = `<strong>${label}</strong><br>${timestamp}<br>`;

      const downloadBtn = document.createElement('a');
      downloadBtn.textContent = 'Download Snapshot';
      downloadBtn.href = canvas.toDataURL('image/png');
      downloadBtn.download = `${label}-${Date.now()}.png`;
      downloadBtn.style.display = 'block';
      downloadBtn.style.marginTop = '5px';

      container.appendChild(canvas);
      container.appendChild(downloadBtn);
      snapshotsContainer.prepend(container);
    }

    async function detectLoop() {
      const faceDetector = ('FaceDetector' in window) ? new FaceDetector({ fastMode: true }) : null;
      const barcodeDetector = ('BarcodeDetector' in window) ? new BarcodeDetector({ formats: ['qr_code'] }) : null;

      if (!faceDetector && !barcodeDetector) {
        log.textContent = 'Face and QR detection not supported in this browser.';
        return;
      }

      const detect = async () => {
        if (!scanning) return;

        ctx.clearRect(0, 0, overlay.width, overlay.height);
        let newInfo = [];

        try {
          if (faceDetector && detectFaces) {
            const faces = await faceDetector.detect(video);
            faces.forEach(face => {
              const box = face.boundingBox;
              ctx.strokeStyle = 'blue';
              ctx.lineWidth = 2;
              ctx.strokeRect(box.x, box.y, box.width, box.height);

              if (!isSimilarFace(box)) {
                seenFaces.push(box);
                faceCount++;
                captureSnapshot('New Face Detected', box);
                newInfo.push('Face');
              }
            });
          }

          if (barcodeDetector && detectQRs) {
            const barcodes = await barcodeDetector.detect(video);
            barcodes.forEach(code => {
              const { x, y, width, height } = code.boundingBox;
              ctx.strokeStyle = 'green';
              ctx.lineWidth = 2;
              ctx.strokeRect(x, y, width, height);
              ctx.fillStyle = 'green';
              ctx.fillText(code.rawValue, x, y - 10);

              if (!seenQRCodes.has(code.rawValue)) {
                seenQRCodes.add(code.rawValue);
                qrCount++;
                captureSnapshot(`New QR Code: ${code.rawValue}`, { x, y, width, height });
                newInfo.push(`QR: ${code.rawValue}`);
              }
            });
          }
        } catch (err) {
          console.error('Detection error:', err);
        }

        log.textContent = `Scanning... ${newInfo.join(', ')}`;
        updateCounters();
        if (scanning) requestAnimationFrame(detect);
      };

      detect();
    }

    setupCamera();
  </script>
</body>
</html>
